Dockerfile:
FROM eclipse-temurin:21-jre-alpine // базовый образ
ARG JAR_FILE=build/libs/*.jar // при сборке образа Docker будет использован файл .jar, находящийся в директории build/libs, присвоенный переменной с именем JAR FILE
COPY ${JAR_FILE} ClockDegree.jar // копируем jar file внутрь контейнера с именем Clockdegree.jar
EXPOSE 8080 // указывает, что контейнер, созданный на основе этого образа, слушает порт 8080
ENTRYPOINT ["java","-jar","/ClockDegree.jar"] // скрипт для старта контейнера:
    Запустится Java виртуальная машина (java).
    параметр -jar указывает запустить Java-приложение из JAR-файла.
    Указан конкретный JAR-файл /ClockDegree.jar, который будет запущен.

Liveness, Readiness probes, Actuator:

подключение зависимости Springboot Actuator
манифест кубернетис ямл

Local Kubernetes deployment (Minikube):
docker build -t clockdegree . сборка образа
minikube start запуск миникуба
kubectl cluster-info просмотрк инфо о кластере
kubectl config use-context minikube переключение контекста Кубернетеса на Миникуб
minikube image load __ загрузка докер-образа в миникуб
kubectl apply -f kube.yaml применение изменений из файла манифеста к ресурсам Кубернетеса
kubectl get deployments получение списка развертываний
kubectl expose deployment clockdegree --type=NodePort создание сервиса типа NodePort, чтобы приложение было доступно из-за пределов кластера. Порт назначается автоматическм
kubectl get services вывод списка сервисов
minikube service clockdegree вызов сервиса

kubectl delete service clockdegree удаление сервиса после окончания работы
kubectl delete deployment clockdegree удаление развертывания
minikube stop остановка миникуба


Prometheus
подключение зависимости 'io.micrometer:micrometer-registry-prometheus:1.13.6'
В кубе:
установка прометея через хельм
патч на нодпорт
редактирование конфигмапы: kubectl edit configmap prometheus-server -n default ( - job_name: clockdegree
                                                           static_configs:
                                                           - targets:
                                                             - clockdegree.default.svc.cluster.local:80
                                                           metrics_path: /actuator/prometheus              )
рестарт деплоймента прометей


---
apiVersion: v1
kind: Service
metadata:
  name: opentelemetry-service
spec:
  type: NodePort
  selector:
    app: opentelemetry-demo
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080

ADD opentelemetry-javaagent.jar /opt/opentelemetry-javaagent.jar
ENTRYPOINT ["java", "-javaagent:/opt/opentelemetry-javaagent.jar", "-jar", "/ClockDegree.jar"]

java -javaagent:opentelemetry-javaagent.jar -Dotel.traces.exporter=logging -Dotel.logs.exporter=logging -Dotel.metrics.exporter=logging -jar build/libs/*.jar

global:
  scrape_interval: 10s # How frequently to scrape targets by default

scrape_configs:
  - job_name: 'spring_micrometer'         # The job name is assigned to scraped metrics by default.
    metrics_path: '/actuator/prometheus'  # The HTTP resource path on which to fetch metrics from targets.
    scrape_interval: 5s                   # How frequently to scrape targets from this job.
    static_configs:                       # A static_config allows specifying a list of targets and a common label set for them
      - targets: ['clockdegree.default.svc.cluster.local:8080']